package com.sist.java;
/* [데이터 저장]
 * 			= 변수 :  byte char short int float double long
										 ==>메소드 
										 			====
										 				리턴형 (실행 결과값), 매개변수(사용자 요청값)
										 															====================	
										 																		=> 값만 전송 ( call by value ) : 복사본
										 																		=> 주소 전송 ( call by reference)
										 																				: 원본 ( 배열,클래스)
				 																				
				 = 배열 : 같은 크기의 데이터를 여러개 저장
				 					데이터형 [] 배열명 = new 데이터형 [저장개수]
				 					=============스택  ================= 힙
				 = 클래스 : 다른 크기의 데이터를 여러개 저장
				 					------------------------------------------------------------------------
				 						= 데이터만 모아서 관리 => ~VO, ~DTO  : 캡슐화
				 						= 메소드만 모아서 관리 => ~DAO, ~Service ~Manager 
				 					------------------------------------------------------------------------ 웹			 					
				 						= 데이터 + 메소드 ( 혼합) => 조립식
 		[데이터 처리]
 			1) 연산자 : 문자가 연산되면 정수형으로 변경, 형변환(int이하 데이터 => int)
 									=> 다른 데이터형이 연산이 되면 => 큰 데이터형으로 변경
 											int + long =long
 											char + int = int
 											int + (int) long = int
 				(1) 단항연산자
 						=증감연산자 (++,--) 
 							int a=10;
 							int b=a++;     => `10
 							
 							int a=10;
 							int b=++a;    => 11
 						=부정연산자 (!) => boolean  ( true => false, false=> true)
 				(2) 이항연산자
 						= 산술연산자 (+,-,*,/,%) => 형변환
 									/ => 0으로 나눌 수 없다
 									/ => 정수/정수=정수
 									% => 결과값은 항상 왼쪽의 부호를 따름
 						= 비교연산자 ( ==, !=, <, >, <=, >=) :결과값 =boolean  => if문에서 사용
 						= 논리연산자 ( &&, ||) => 제어문
 								=> 효율적인 연산
 								=> && (직렬) => 왼쪽의 결과가 false
 								=> || ( 병렬 ) => 왼쪽의 결과가 true  
 						= 대입연산자  : 연산자 우선순위가 가장 낮다
 																	( =, +=, -=)
 				(3) 삼항연산자 : if~else
 													조건? 값1:값2
 													====
 															true => 1  / false =>2
 			2)제어문 (흐름)
 						= 조건문 (if, if~else, if~else if ...)
 								형식)
 										if (조건문)  => true일 때 문장 수행
 										{
 												실행문장 => 조건문 ( 부정, 비교,논리)
 										}
 										===============================================
 										if(조건문)
 										{
 												실행문장 =>  true 일 때 처리
 										}
 										else
 										{
 												실행문장 => false
 										}
 										===============================================
 									    if (조건문)  => true/false
 									    {
 									    		실행문장  => true 일 때 실행하고 종료    
 									    									false면 다음 조건문으로 이동
 									    }
 									    else if (조건문)
 									    {
 									    		실행문장
 									    }
 									   else if (조건문)
 									   {
 									   			실행문장
 									   	}
 									   	else
 									   	{
 									   			실행문장  : 위에 해당하는 조건이 없다면 else 문 실행
 									   										else문은 생략가능
 									   	}
 									 ====================================================
 									 	언어마다 => 동작 동일 (형식 다름)
 						= 선택문 ( switch ~case)
 										switch(정수,문자,문자열)
 										{ 
 												case 값1: 실행문장 , break;
 												case 값2: 실행문장 , break;							
 												default : 실행문장   (생략가능)					
 										}
 						= 반복문 (for,while)
 										for ( 초기값;조건문;증가식)
 										{				1				2				3
 											실행문장 
 										}			4
 									
 									int [] arr={1,2,3,4,5}
 									=> for (int i:arr)
 											==> 변수가 실제 저장된 값을 읽어온다
 											for( 데이터형변수 : 배열, 컬랙션_
 											{
 												실행문장
 											}
 											
									초기값  1
									while(조건문) 2
									{
											실행문장 3
											증가식 	4     ===> 증가후에 조건문으로 이동
									}
 						= 반복제어문  (break, continue)  ====================> while 
 										break : 반복을 중단
 										continue  : 제외(특정부분)
 										** while문 => 무한루프
 						 for each - 배열 / 컬렉션에서 많이 사용한다
===========================================기본문법 =======================
 			 		
 			[관련된 내용을 묶어서 사용]
 			
 			1.변수가 여러개일때 => 배열, 클래스
 			2.명령문이 여러개=> 메소드(연산자+제어문) ***** 객체지향의 핵심 ( 재사용이 가능)
 			3. 메소드가 여러개 => 클래스
 			4. 클래스가 여러개 => 패키지
 			==============
 			비정상 종료를 하지 않는 프로그램 : 예외처리
 			
 			(1) 메소드 : 결과값 (리턴형) , 요철값(매개변수)
 										=============
 			=====================================
 									리턴형								요청값(매개변수)
 									* 1개만									* 여러개
 			=====================================
 										O												O  => DB(검색) SQL
 			=====================================
 										O												X
 			=====================================
 										X	(void)									O   => DB(insert,update,delete)
 		    =====================================
 		    						    X													X    => 거의 존재하지 않는다
 			=====================================

 
 */
public class MainClass {

}
